                   ;;;;;COMPUTER MODELS OF MUSICAL CREATIVITY;;;;;                   ;;;;;            By David Cope            ;;;;;                   ;;;;;     Sorcerer Function/Chapter 5     ;;;;;                   ;;;;;             COMMON LISP             ;;;;;                   ;;;;;      menu code to run sorcerer      ;;;;;                   ;;;;;               function              ;;;;;                   ;;;;;COMPUTER MODELS OF MUSICAL CREATIVITY;;;;;(defVar *CHOSEN-SCORE* ())(defClass SIZE-WINDOW (window)  nil  (:default-initargs :window-type :document    :window-title "Size"    :view-position #@(210 140)    :view-size #@(166 150)    :close-box-p t    :auto-position :centermainscreen))(defMethod INITIALIZE-INSTANCE ((window SIZE-WINDOW) &rest initargs)  (apply #'call-next-method window initargs)    (add-subviews     window     (make-instance                            'static-text-dialog-item      :view-font '("geneva" 10 :bold)      :view-position #@(10 4)      :dialog-item-text      "Size:")    (make-dialog-item      'button-dialog-item     #@(20 100) #@(120 32)     "Done"     #'(lambda (item)          item          (gc)         (window-close window)         (without-interrupts (translate-to-alice-notation *size* (eval *score-name*))))     :default-button t)    (make-instance 'editable-text-dialog-item      :view-position #@(63 19)      :view-size #@(31 19)      :dialog-item-text (write-to-string *size*)      :dialog-item-action #'(lambda (item)                              (setq *size* (ignore-errors (read-from-string (dialog-item-text item))))))))(defClass SCORE-FLOATING-WINDOW (windoid)  nil  (:default-initargs     :view-size #@(50 166)    :window-title ""    :view-position (make-point 10 34)))(defMethod INITIALIZE-INSTANCE ((window SCORE-FLOATING-WINDOW) &rest initargs)  (apply #'call-next-method window initargs)  (add-subviews window     (make-instance 'button-dialog-item       :dialog-item-text " Play "      :dialog-item-action #'(lambda(x)                              (declare (ignore x))                              (stop-the-music)                               (sleep .2)                              (setq *process*                                     (process-run-function "" #'play-events (remove-rests (eval *score-name*)))))      :view-font '("geneva" 9 :bold)      :view-size #@(46 30)      :view-position #@(2 4))(make-instance 'button-dialog-item       :dialog-item-text "Stop"      :dialog-item-action #'(lambda(x)                              (declare (ignore x))                              (stop-the-music)                              (process-kill *process*))      :view-font '("geneva" 9 :bold)      :view-size #@(46 30)      :view-position #@(2 44))    (make-instance 'button-dialog-item       :dialog-item-text "Size"      :dialog-item-action #'(lambda(x)                              (declare (ignore x))                              (setq *add* t)                              (if cmn::*score-pages*                                 (mapcar #'window-close cmn::*score-pages*))                              (if *pages-window* (window-close *pages-window*))                              (make-instance 'size-window))      :view-font '("geneva" 9 :bold)      :view-size #@(46 30)      :view-position #@(2 84))    (make-instance 'button-dialog-item       :dialog-item-text "Close"      :dialog-item-action #'(lambda(x)                              (declare (ignore x))                              (setq *add* t)                              (if cmn::*score-pages*                                 (mapcar #'window-close cmn::*score-pages*))                              (if *pages-window* (window-close *pages-window*))                              (window-close window))      :view-font '("geneva" 9 :bold)      :view-size #@(46 30)      :view-position #@(2 124))))(defun SET-PAGES (pages number)  (set-window-layer (nth (1- number) pages) 1)) ;;;________________________(defClass PAGE-FLOATING-WINDOW (windoid)  nil  (:default-initargs :window-type :document    :view-size #@(140 50)    :window-title "Get Page"    :close-box-p ()    :view-position (make-point (- *screen-width* 230) 44)))(defMethod ACCEPT-KEY-EVENTS ((w PAGE-FLOATING-WINDOW))  t)(defMethod INITIALIZE-INSTANCE ((window PAGE-FLOATING-WINDOW) &rest initargs)  (apply #'call-next-method window initargs)  (add-subviews window     (make-instance 'static-text-dialog-item       :dialog-item-text "Go To Page"      :view-position #@(8 4)      :view-size #@(114 16)      :view-font '("geneva" 10 :bold))    (make-instance 'static-text-dialog-item       :dialog-item-text "Total"      :view-position #@(78 4)      :view-size #@(74 16)      :view-font '("geneva" 10 :bold))    (make-instance 'static-text-dialog-item       :dialog-item-text (write-to-string (length cmn::*score-pages*))      :view-position #@(82 23)      :view-size #@(114 16)      :view-font '("geneva" 14 :bold))    (make-instance 'editable-text-dialog-item :dialog-item-text                    (write-to-string *current-page-number*)                   :view-size #@(20 15)                    :view-position #@(12 24)                   :dialog-item-action                    #'(lambda (item)                        (ignore-errors (let ((test (read-from-string                                                    (dialog-item-text item))))                                        (setq *current-page-number* test)                                        (unless                                           (or (> *current-page-number* (length cmn::*score-pages*))                                              (< *current-page-number* 1))                                          (ignore-errors (set-pages (reverse cmn::*score-pages*) *current-page-number*)))                                        (select-all window)))))))(defVar MY-MENU *default-menubar*)(defVar *TARGET-ITEM* ())(defVar *SOURCE-ITEMS* ())(defVar *CHOSEN-SCORE* ())(defVar *SORCERER-MENUBAR* (list (first my-menu)                                 (second my-menu)                                 (third my-menu)                                 (fourth my-menu)                                 (fifth my-menu)                                 (make-instance 'menu :menu-title "MIDI"                                                :menu-items                                                 (list                                                  (make-instance                                                    'menu-item :menu-item-title "Variables"                                                   :command-key #\1                                                   :menu-item-action                                                    #'(lambda nil                                                        (make-instance 'play-window)))))                                 (make-instance 'menu :menu-title "Sorcerer"                                                :menu-items                                                 (list                                                  (make-instance                                                    'menu-item :menu-item-title "Match"                                                   :command-key #\2                                                   :menu-item-action                                                    #'(lambda nil                                                        (setq *choice-of-score-or-match* 'match)                                                       (setq *target-item* (select-item-from-list *choices* :window-title "Select Target Work"))                                                       (setq *source-items* (select-item-from-list *choices* :selection-type :disjoint :window-title "Select Source Works"))                                                       (SORCERER (first *target-item*) *source-items*)))                                                 (make-instance                                                    'menu-item :menu-item-title "Score"                                                   :command-key #\3                                                   :menu-item-action                                                    #'(lambda nil                                                        (setq *choice-of-score-or-match* 'score)                                                       (setq *chosen-score* (select-item-from-list *choices*))                                                         (without-interrupts (translate-to-alice-notation *size* (eval (setq *score-name* (first *chosen-score*)))))                                                         (make-instance 'score-floating-window)))))                                 (sixth my-menu)))(set-menubar *sorcerer-menubar*)
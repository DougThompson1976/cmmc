                   ;;;;;COMPUTER MODELS OF MUSICAL CREATIVITY;;;;;                   ;;;;;            By David Cope            ;;;;;                   ;;;;;     Sorcerer Function/Chapter 5     ;;;;;                   ;;;;;             COMMON LISP             ;;;;;                   ;;;;;    drawing code to run sorcerer     ;;;;;                   ;;;;;               function              ;;;;;                   ;;;;;COMPUTER MODELS OF MUSICAL CREATIVITY;;;;;(in-package cmn)(defVar *SCORE-PAGES* ())(defVar *WHITE-ON-BLACK* t)(defVar *NUMBERS* 1);;;;;#|(cmn::drawify #<cmn::score #xD186C56>)  #<cmn::score #xD186C56>|#;;;;;(defun DRAWIFY (score)  "A slight revision of this function to allow for multiple paging, etc."  (setq *numbers* 1)  (unless (equal common-lisp-user::*output-type* :postscript)(setq *score-pages* ()))  (when (not no-initialization)    (let ((original-name (output-file score))	  (current-objects (make-array (staves score)))	  (staff-sizes (make-array (staves score)))	  (staffs (make-array (staves score)))	  (i 0)	  (staves (staves score)))      (map-over-staves #'(lambda (score staff)			   (declare (ignore score))			   (setf (aref staffs i) staff)			   (setf (aref current-objects i) (staff-data staff))			   (if (and (staff-size staff)				    (/= (staff-size staff) 1.0))                             (let* ((scaler (/ 1.0 (staff-size staff))))                               (setf (aref staff-sizes i) (staff-size staff))                               (loop for object in (staff-data staff) do				     (when (score-object-p object) ;might be embedded page mark				       (setf (box-x0 object) (* (box-x0 object) scaler))				       (if (box-x1 object) (setf (box-x1 object) (* (box-x1 object) scaler)))				       (if (or (bar-p object)					       (brace-p object)					       (bracket-p object))					 (setf (box-y1 object) (* (box-y1 object) scaler)))				       (setf (box-y0 object) (* (box-y0 object) scaler))				       (if (staff-relative-mixin-p object)					 (setf (staff-y0 object) (* (staff-y0 object) scaler)))				       (if (marks object)					 (loop for mark in (marks object) do					       (if (crescendo-p mark)					         (progn						   (setf (box-x0 mark) (* (box-x0 mark) scaler))						   (setf (box-x1 mark) (* (box-x1 mark) scaler))))))				       (when (audible-p object)				         (if (chord-p object)					   (loop for note in (chord-data object) do					         (setf (box-x0 note) (* (box-x0 note) scaler))					         (setf (box-x1 note) (* (box-x1 note) scaler))					     					         (setf (staff-y0 note) (* (staff-y0 note) scaler))))				         (if (beams object)					   (let* ((beams (beams object))						  (beam-data (beam-data beams)))					     (setf (staff-y0 beams) (* (staff-y0 beams) scaler))					     (loop for beams in beam-data do					           (setf (bdat-stfy0 beams) (* (bdat-stfy0 beams) scaler))					           (setf (bdat-x0 beams) (* (bdat-x0 beams) scaler)))))))))			     (setf (aref staff-sizes i) nil))			   (incf i))		       score)      ;; take outer score's transformation matrix into account (inner scores are handled as marks)      (loop for page from 1 to (pages score) do	    (if (not (embedded score)) (matrix-front score (matrix score)))	    (when (= page 1)	      (if (marks score) (display-marks score score))	      (loop for system in (systems score) do	            (if (marks system) (display-marks system score))))	    (setf *cmn-page* page)	    (if (or no-initialization		    (not (member (output-type score) '(:qddirect :quickdraw))))	      (one-page score staffs staff-sizes current-objects page original-name)	      #+mcl	      ;; changed 19-July-98 to make a new window for each page	      (let ((window (make-instance 'qdd-previewer                              :scroller-class 'ccl::scroller			      :window-type :document-with-zoom			      :view-size (ccl:make-point (- ccl::*screen-width* 10)                                                         (- ccl::*screen-height* 60)) ;can't use mcl point reader macro -- causes other lisps to complain			      :track-thumb-p t			      :window-show t			      :window-title (prog1                                               (format nil "~A~A~A" COMMON-LISP-USER::*score-name* " " *numbers*)					      (incf *numbers*)))))                (setq COMMON-LISP-USER::*the-score-name* COMMON-LISP-USER::*score-name*)                (push window  *score-pages*)                (setq COMMON-LISP-USER::*current-page-number* 1)	        (ccl:with-focused-view (ccl::my-scroller window) 	          (setf *cmn-view* (ccl::my-scroller window)) 	          (ccl:start-picture (ccl::my-scroller window) 0 0 32767 32767)	          (one-page score staffs staff-sizes current-objects page original-name)	          (setf (view-picture window) (ccl:get-picture (ccl::my-scroller window))))))	    (loop for i from 0 below staves do	          (if (aref current-objects i)	            (setf (aref current-objects i) (cdr (aref current-objects i)))))            ;;(rearrange-pages *score-pages*))))  score)